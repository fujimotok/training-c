diff --git a/line_trace/line_trace.cpp b/line_trace/line_trace.cpp
index 64eb8b8..ca34d74 100644
--- a/line_trace/line_trace.cpp
+++ b/line_trace/line_trace.cpp
@@ -2,6 +2,7 @@
 #include <fstream>
 #include <stdlib.h>
 #include <signal.h>
+#include <string>
 
 int g_is_inv = 0;
 int (*g_logic)(cv::Mat&);
@@ -12,13 +13,58 @@ int (*g_logic)(cv::Mat&);
  * 1 2 3     v
  */
 enum MOVE_DIRECTION {
-  MOVE_BACK   = 2,
-  MOVE_LEFT   = 4,
-  MOVE_STOP   = 5,
-  MOVE_RIGHT  = 6,
-  MOVE_FOWARD = 8,
+  MOVE_BACK    = 2,
+  MOVE_LEFT    = 4,
+  MOVE_STOP    = 5,
+  MOVE_RIGHT   = 6,
+  MOVE_UPPER_R = 7,
+  MOVE_FOWARD  = 8,
+  MOVE_UPPER_L = 9,
 };
 
+struct th_main_data
+{
+  int is_running;        // thread exit flag
+  cv::VideoCapture *cap; // video capture object
+};
+struct th_main_data g_data_main = {1, NULL};
+
+const int T = 100 * 1000 * 1000; // 100 [msec]
+struct th_pwm_data
+{
+  int is_running; // thread exit flag
+  int period;     // pwm T[usec]
+  int duty;       // pwm duty[%]
+  int gpio;       // gpioXX
+};
+
+struct th_pwm_data g_data_r_f = {1, T, 0, 67};
+struct th_pwm_data g_data_r_b = {1, T, 0, 69};
+struct th_pwm_data g_data_l_f = {1, T, 0, 71};
+struct th_pwm_data g_data_l_b = {1, T, 0, 73};
+
+void* pwm_loop(void* data)
+{
+  struct th_pwm_data *d = (struct th_pwm_data *)data;
+  std::string path = "/sys/class/gpio/gpio" + std::to_string(d->gpio) +"/value";
+  std::ofstream out(path.c_str());
+  out << "0";
+
+  while(d->is_running)
+    {
+      struct timespec on_period  = {0, d->period * (d->duty / 100.0)};
+      struct timespec off_period = {0, d->period * (1.0 - (d->duty / 100.0))};
+      out << "1" << std::endl;  
+      nanosleep(&on_period, NULL);
+      out << "0" << std::endl;
+      nanosleep(&off_period, NULL);
+    }
+
+  out << "0";
+  return NULL;
+}
+
+
 void move_car (int direction)
 {
   int is_l_forard = 0;
@@ -113,24 +159,23 @@ int raster_scan (cv::Mat &frame)
     }
 }
 
-void main_loop (cv::VideoCapture &cap)
+void main_loop (void *data)
 {
-  cv::Mat frame;
-  cap >> frame; // get a new frame from camera
+  struct th_main_data *d = (struct th_main_data *)data;
+
+  while(1)
+    {
+      cv::Mat frame;
+      d->cap >> frame; // get a new frame from camera
 
-  move_car(g_logic(frame));
+      move_car(g_logic(frame));
 
-  cv::imwrite("/var/tmp/img.jpg", frame);
+      cv::imwrite("/var/tmp/img.jpg", frame);
+    }
 }
 
 int main(int argc, char* argv[])
 {
-  signal(SIGTERM,
-	 [](int signum){
-	   move_car(MOVE_STOP);
-	   exit(signum);
-	 });
-
   g_logic = raster_scan;
 
   if ((argc == 2) && (argv[1][0] = '1'))
@@ -145,9 +190,37 @@ int main(int argc, char* argv[])
       return -1;
     }
 
-  while(1)
+  g_data_main.cap = &cap;
+    
+  pthread_t th_main, th_pwm_r_f,th_pwm_r_b, th_pwm_l_f,th_pwm_l_b;
+  pthread_create(&th_main, NULL, main_loop, &g_data_main);
+  pthread_create(&th_pwm_r_f, NULL, pwm_loop, &g_data_r_f);
+  pthread_create(&th_pwm_r_b, NULL, pwm_loop, &g_data_r_b);
+  pthread_create(&th_pwm_l_f, NULL, pwm_loop, &g_data_l_f);
+  pthread_create(&th_pwm_l_b, NULL, pwm_loop, &g_data_l_b);
+
+  int sig;
+  sigset_t block_mask;
+  sigemptyset(&block_mask);
+  sigaddset(&block_mask, SIGINT);
+  sigaddset(&block_mask, SIGTERM);
+  sigprocmask(SIG_SETMASK, &block_mask, NULL);
+
+  while (1)
     {
-      main_loop(cap);
+      if (sigwait(&block_mask, &sig) == 0)
+	{
+	  if (sig == SIGINT || sig == SIGTERM) break;
+	  else continue;
+	}
     }
+
+  
+  pthread_join(th_main, NULL);
+  pthread_join(th_pwm_r_f, NULL);
+  pthread_join(th_pwm_r_b, NULL);
+  pthread_join(th_pwm_l_f, NULL);
+  pthread_join(th_pwm_l_b, NULL);
+
   return 0;
 }
